TODO: Final code runthrough
TODO: 2 more beta testers + akshaya + cullen
TODO: Final coverage report
TODO: README
		The game has already been built; you can run it on Windows through runWindows.bat, or on
		Unix-based systems with runLinux.sh. To manually build, run ./build.sh in a bash
		environment (not cmd). This will result in a DungeonGame.jar file, which can be launched
		using the above files.
		Sample output for build script:
			Starting up...
			Compiling...
			Building...
			added manifest
			adding: assets/(in = 0) (out= 0)(stored 0%)
			adding: assets/Mellohi.wav(in = 18821608) (out= 17742122)(deflated 5%)
			adding: assets/Win.wav(in = 7891432) (out= 6550143)(deflated 16%)
			adding: com/(in = 0) (out= 0)(stored 0%)
			adding: com/jdabtieu/(in = 0) (out= 0)(stored 0%)
			adding: com/jdabtieu/input/(in = 0) (out= 0)(stored 0%)
			adding: com/jdabtieu/input/DoubleCondition.class(in = 231) (out= 182)(deflated 21%)
			adding: com/jdabtieu/input/Input.class(in = 3967) (out= 1614)(deflated 59%)
			adding: com/jdabtieu/input/IntCondition.class(in = 225) (out= 177)(deflated 21%)
			adding: com/jdabtieu/input/LongCondition.class(in = 227) (out= 180)(deflated 20%)
			adding: com/jdabtieu/input/StringCondition.class(in = 248) (out= 189)(deflated 23%)
			adding: EnemyAttackPattern.class(in = 214) (out= 170)(deflated 20%)
			adding: Main.class(in = 4824) (out= 2662)(deflated 44%)
			ignoring entry META-INF/
			ignoring entry META-INF/MANIFEST.MF
			adding: Player.class(in = 3227) (out= 1660)(deflated 48%)
			adding: Stage1.class(in = 5605) (out= 2253)(deflated 59%)
			adding: Stage2.class(in = 9112) (out= 3735)(deflated 59%)
			adding: Stage3.class(in = 11042) (out= 4710)(deflated 57%)
			adding: Util.class(in = 6504) (out= 2966)(deflated 54%)
			adding: Weapon.class(in = 1135) (out= 686)(deflated 39%)
			Cleaning up...
*DON: Variables fix		Player.java:83	Util.java:156	Stage2.java:263	Stage3.java:143,156,160
DONE: Check requirements
	DONE: User-friendly (instructions and controls are clear, spread out text to make it easy to read, etc.)
	DONE: Must be a robust program (no noticeable runtime or logic errors)
	DONE: Proper header comments (class and method headers)
	DONE: Methods must be efficiently designed
	DONE: Coverage
	DONE: -Werror -Wall -pedantic
	DONE: Appropriate spacing and indentation and line length
	DONE: Other professional formatting (no unused variables, etc.)
	DONE: Proper variable names
	DONE: An end condition (at some point the program ends)
	DONE: Unique from all other projects
	DONE: Has no syntax errors (it runs successfully) 
	DONE: Must be different from any programming assignment done previously
	DONE: Must include an array(s): could be inventory system, lifelines, etc.
	DONE: Must divide program up into methods

DONE: Check challanges
	DONE Play music or other sound effects in the program (not possible in repl.it with java)
	DONE Start the program at a “main menu”. When the adventure is finished, return to the main menu.
	DONE Utilize time delays to put “pauses” in the program
DONE: Final runthrough